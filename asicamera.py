# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _asicamera
else:
    import _asicamera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


ASI_CAMERA_SUCCESS = _asicamera.ASI_CAMERA_SUCCESS
ASICAMERA_ID_MAX = _asicamera.ASICAMERA_ID_MAX
ASI_BAYER_RG = _asicamera.ASI_BAYER_RG
ASI_BAYER_BG = _asicamera.ASI_BAYER_BG
ASI_BAYER_GR = _asicamera.ASI_BAYER_GR
ASI_BAYER_GB = _asicamera.ASI_BAYER_GB
ASI_IMG_RAW8 = _asicamera.ASI_IMG_RAW8
ASI_IMG_RGB24 = _asicamera.ASI_IMG_RGB24
ASI_IMG_RAW16 = _asicamera.ASI_IMG_RAW16
ASI_IMG_Y8 = _asicamera.ASI_IMG_Y8
ASI_IMG_END = _asicamera.ASI_IMG_END
ASI_GUIDE_NORTH = _asicamera.ASI_GUIDE_NORTH
ASI_GUIDE_SOUTH = _asicamera.ASI_GUIDE_SOUTH
ASI_GUIDE_EAST = _asicamera.ASI_GUIDE_EAST
ASI_GUIDE_WEST = _asicamera.ASI_GUIDE_WEST
ASI_FLIP_NONE = _asicamera.ASI_FLIP_NONE
ASI_FLIP_HORIZ = _asicamera.ASI_FLIP_HORIZ
ASI_FLIP_VERT = _asicamera.ASI_FLIP_VERT
ASI_FLIP_BOTH = _asicamera.ASI_FLIP_BOTH
ASI_MODE_NORMAL = _asicamera.ASI_MODE_NORMAL
ASI_MODE_TRIG_SOFT_EDGE = _asicamera.ASI_MODE_TRIG_SOFT_EDGE
ASI_MODE_TRIG_RISE_EDGE = _asicamera.ASI_MODE_TRIG_RISE_EDGE
ASI_MODE_TRIG_FALL_EDGE = _asicamera.ASI_MODE_TRIG_FALL_EDGE
ASI_MODE_TRIG_SOFT_LEVEL = _asicamera.ASI_MODE_TRIG_SOFT_LEVEL
ASI_MODE_TRIG_HIGH_LEVEL = _asicamera.ASI_MODE_TRIG_HIGH_LEVEL
ASI_MODE_TRIG_LOW_LEVEL = _asicamera.ASI_MODE_TRIG_LOW_LEVEL
ASI_MODE_END = _asicamera.ASI_MODE_END
ASI_TRIG_OUTPUT_PINA = _asicamera.ASI_TRIG_OUTPUT_PINA
ASI_TRIG_OUTPUT_PINB = _asicamera.ASI_TRIG_OUTPUT_PINB
ASI_TRIG_OUTPUT_NONE = _asicamera.ASI_TRIG_OUTPUT_NONE
ASI_SUCCESS = _asicamera.ASI_SUCCESS
ASI_ERROR_INVALID_INDEX = _asicamera.ASI_ERROR_INVALID_INDEX
ASI_ERROR_INVALID_ID = _asicamera.ASI_ERROR_INVALID_ID
ASI_ERROR_INVALID_CONTROL_TYPE = _asicamera.ASI_ERROR_INVALID_CONTROL_TYPE
ASI_ERROR_CAMERA_CLOSED = _asicamera.ASI_ERROR_CAMERA_CLOSED
ASI_ERROR_CAMERA_REMOVED = _asicamera.ASI_ERROR_CAMERA_REMOVED
ASI_ERROR_INVALID_PATH = _asicamera.ASI_ERROR_INVALID_PATH
ASI_ERROR_INVALID_FILEFORMAT = _asicamera.ASI_ERROR_INVALID_FILEFORMAT
ASI_ERROR_INVALID_SIZE = _asicamera.ASI_ERROR_INVALID_SIZE
ASI_ERROR_INVALID_IMGTYPE = _asicamera.ASI_ERROR_INVALID_IMGTYPE
ASI_ERROR_OUTOF_BOUNDARY = _asicamera.ASI_ERROR_OUTOF_BOUNDARY
ASI_ERROR_TIMEOUT = _asicamera.ASI_ERROR_TIMEOUT
ASI_ERROR_INVALID_SEQUENCE = _asicamera.ASI_ERROR_INVALID_SEQUENCE
ASI_ERROR_BUFFER_TOO_SMALL = _asicamera.ASI_ERROR_BUFFER_TOO_SMALL
ASI_ERROR_VIDEO_MODE_ACTIVE = _asicamera.ASI_ERROR_VIDEO_MODE_ACTIVE
ASI_ERROR_EXPOSURE_IN_PROGRESS = _asicamera.ASI_ERROR_EXPOSURE_IN_PROGRESS
ASI_ERROR_GENERAL_ERROR = _asicamera.ASI_ERROR_GENERAL_ERROR
ASI_ERROR_INVALID_MODE = _asicamera.ASI_ERROR_INVALID_MODE
ASI_ERROR_GPS_NOT_SUPPORTED = _asicamera.ASI_ERROR_GPS_NOT_SUPPORTED
ASI_ERROR_GPS_VER_ERR = _asicamera.ASI_ERROR_GPS_VER_ERR
ASI_ERROR_GPS_FPGA_ERR = _asicamera.ASI_ERROR_GPS_FPGA_ERR
ASI_ERROR_GPS_PARAM_OUT_OF_RANGE = _asicamera.ASI_ERROR_GPS_PARAM_OUT_OF_RANGE
ASI_ERROR_GPS_DATA_INVALID = _asicamera.ASI_ERROR_GPS_DATA_INVALID
ASI_ERROR_END = _asicamera.ASI_ERROR_END
ASI_FALSE = _asicamera.ASI_FALSE
ASI_TRUE = _asicamera.ASI_TRUE
class ASI_CAMERA_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Name = property(_asicamera.ASI_CAMERA_INFO_Name_get, _asicamera.ASI_CAMERA_INFO_Name_set)
    CameraID = property(_asicamera.ASI_CAMERA_INFO_CameraID_get, _asicamera.ASI_CAMERA_INFO_CameraID_set)
    MaxHeight = property(_asicamera.ASI_CAMERA_INFO_MaxHeight_get, _asicamera.ASI_CAMERA_INFO_MaxHeight_set)
    MaxWidth = property(_asicamera.ASI_CAMERA_INFO_MaxWidth_get, _asicamera.ASI_CAMERA_INFO_MaxWidth_set)
    IsColorCam = property(_asicamera.ASI_CAMERA_INFO_IsColorCam_get, _asicamera.ASI_CAMERA_INFO_IsColorCam_set)
    BayerPattern = property(_asicamera.ASI_CAMERA_INFO_BayerPattern_get, _asicamera.ASI_CAMERA_INFO_BayerPattern_set)
    SupportedBins = property(_asicamera.ASI_CAMERA_INFO_SupportedBins_get, _asicamera.ASI_CAMERA_INFO_SupportedBins_set)
    SupportedVideoFormat = property(_asicamera.ASI_CAMERA_INFO_SupportedVideoFormat_get, _asicamera.ASI_CAMERA_INFO_SupportedVideoFormat_set)
    PixelSize = property(_asicamera.ASI_CAMERA_INFO_PixelSize_get, _asicamera.ASI_CAMERA_INFO_PixelSize_set)
    MechanicalShutter = property(_asicamera.ASI_CAMERA_INFO_MechanicalShutter_get, _asicamera.ASI_CAMERA_INFO_MechanicalShutter_set)
    ST4Port = property(_asicamera.ASI_CAMERA_INFO_ST4Port_get, _asicamera.ASI_CAMERA_INFO_ST4Port_set)
    IsCoolerCam = property(_asicamera.ASI_CAMERA_INFO_IsCoolerCam_get, _asicamera.ASI_CAMERA_INFO_IsCoolerCam_set)
    IsUSB3Host = property(_asicamera.ASI_CAMERA_INFO_IsUSB3Host_get, _asicamera.ASI_CAMERA_INFO_IsUSB3Host_set)
    IsUSB3Camera = property(_asicamera.ASI_CAMERA_INFO_IsUSB3Camera_get, _asicamera.ASI_CAMERA_INFO_IsUSB3Camera_set)
    ElecPerADU = property(_asicamera.ASI_CAMERA_INFO_ElecPerADU_get, _asicamera.ASI_CAMERA_INFO_ElecPerADU_set)
    BitDepth = property(_asicamera.ASI_CAMERA_INFO_BitDepth_get, _asicamera.ASI_CAMERA_INFO_BitDepth_set)
    IsTriggerCam = property(_asicamera.ASI_CAMERA_INFO_IsTriggerCam_get, _asicamera.ASI_CAMERA_INFO_IsTriggerCam_set)
    Unused = property(_asicamera.ASI_CAMERA_INFO_Unused_get, _asicamera.ASI_CAMERA_INFO_Unused_set)

    def __init__(self):
        _asicamera.ASI_CAMERA_INFO_swiginit(self, _asicamera.new_ASI_CAMERA_INFO())
    __swig_destroy__ = _asicamera.delete_ASI_CAMERA_INFO

# Register ASI_CAMERA_INFO in _asicamera:
_asicamera.ASI_CAMERA_INFO_swigregister(ASI_CAMERA_INFO)
ASI_GAIN = _asicamera.ASI_GAIN
ASI_EXPOSURE = _asicamera.ASI_EXPOSURE
ASI_GAMMA = _asicamera.ASI_GAMMA
ASI_WB_R = _asicamera.ASI_WB_R
ASI_WB_B = _asicamera.ASI_WB_B
ASI_OFFSET = _asicamera.ASI_OFFSET
ASI_BANDWIDTHOVERLOAD = _asicamera.ASI_BANDWIDTHOVERLOAD
ASI_OVERCLOCK = _asicamera.ASI_OVERCLOCK
ASI_TEMPERATURE = _asicamera.ASI_TEMPERATURE
ASI_FLIP = _asicamera.ASI_FLIP
ASI_AUTO_MAX_GAIN = _asicamera.ASI_AUTO_MAX_GAIN
ASI_AUTO_MAX_EXP = _asicamera.ASI_AUTO_MAX_EXP
ASI_AUTO_TARGET_BRIGHTNESS = _asicamera.ASI_AUTO_TARGET_BRIGHTNESS
ASI_HARDWARE_BIN = _asicamera.ASI_HARDWARE_BIN
ASI_HIGH_SPEED_MODE = _asicamera.ASI_HIGH_SPEED_MODE
ASI_COOLER_POWER_PERC = _asicamera.ASI_COOLER_POWER_PERC
ASI_TARGET_TEMP = _asicamera.ASI_TARGET_TEMP
ASI_COOLER_ON = _asicamera.ASI_COOLER_ON
ASI_MONO_BIN = _asicamera.ASI_MONO_BIN
ASI_FAN_ON = _asicamera.ASI_FAN_ON
ASI_PATTERN_ADJUST = _asicamera.ASI_PATTERN_ADJUST
ASI_ANTI_DEW_HEATER = _asicamera.ASI_ANTI_DEW_HEATER
ASI_FAN_ADJUST = _asicamera.ASI_FAN_ADJUST
ASI_PWRLED_BRIGNT = _asicamera.ASI_PWRLED_BRIGNT
ASI_USBHUB_RESET = _asicamera.ASI_USBHUB_RESET
ASI_GPS_SUPPORT = _asicamera.ASI_GPS_SUPPORT
ASI_GPS_START_LINE = _asicamera.ASI_GPS_START_LINE
ASI_GPS_END_LINE = _asicamera.ASI_GPS_END_LINE
ASI_ROLLING_INTERVAL = _asicamera.ASI_ROLLING_INTERVAL
class ASI_CONTROL_CAPS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Name = property(_asicamera.ASI_CONTROL_CAPS_Name_get, _asicamera.ASI_CONTROL_CAPS_Name_set)
    Description = property(_asicamera.ASI_CONTROL_CAPS_Description_get, _asicamera.ASI_CONTROL_CAPS_Description_set)
    MaxValue = property(_asicamera.ASI_CONTROL_CAPS_MaxValue_get, _asicamera.ASI_CONTROL_CAPS_MaxValue_set)
    MinValue = property(_asicamera.ASI_CONTROL_CAPS_MinValue_get, _asicamera.ASI_CONTROL_CAPS_MinValue_set)
    DefaultValue = property(_asicamera.ASI_CONTROL_CAPS_DefaultValue_get, _asicamera.ASI_CONTROL_CAPS_DefaultValue_set)
    IsAutoSupported = property(_asicamera.ASI_CONTROL_CAPS_IsAutoSupported_get, _asicamera.ASI_CONTROL_CAPS_IsAutoSupported_set)
    IsWritable = property(_asicamera.ASI_CONTROL_CAPS_IsWritable_get, _asicamera.ASI_CONTROL_CAPS_IsWritable_set)
    ControlType = property(_asicamera.ASI_CONTROL_CAPS_ControlType_get, _asicamera.ASI_CONTROL_CAPS_ControlType_set)
    Unused = property(_asicamera.ASI_CONTROL_CAPS_Unused_get, _asicamera.ASI_CONTROL_CAPS_Unused_set)

    def __init__(self):
        _asicamera.ASI_CONTROL_CAPS_swiginit(self, _asicamera.new_ASI_CONTROL_CAPS())
    __swig_destroy__ = _asicamera.delete_ASI_CONTROL_CAPS

# Register ASI_CONTROL_CAPS in _asicamera:
_asicamera.ASI_CONTROL_CAPS_swigregister(ASI_CONTROL_CAPS)
ASI_EXP_IDLE = _asicamera.ASI_EXP_IDLE
ASI_EXP_WORKING = _asicamera.ASI_EXP_WORKING
ASI_EXP_SUCCESS = _asicamera.ASI_EXP_SUCCESS
ASI_EXP_FAILED = _asicamera.ASI_EXP_FAILED
class ASI_ID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_asicamera.ASI_ID_id_get, _asicamera.ASI_ID_id_set)

    def __init__(self):
        _asicamera.ASI_ID_swiginit(self, _asicamera.new_ASI_ID())
    __swig_destroy__ = _asicamera.delete_ASI_ID

# Register ASI_ID in _asicamera:
_asicamera.ASI_ID_swigregister(ASI_ID)
class ASI_SUPPORTED_MODE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SupportedCameraMode = property(_asicamera.ASI_SUPPORTED_MODE_SupportedCameraMode_get, _asicamera.ASI_SUPPORTED_MODE_SupportedCameraMode_set)

    def __init__(self):
        _asicamera.ASI_SUPPORTED_MODE_swiginit(self, _asicamera.new_ASI_SUPPORTED_MODE())
    __swig_destroy__ = _asicamera.delete_ASI_SUPPORTED_MODE

# Register ASI_SUPPORTED_MODE in _asicamera:
_asicamera.ASI_SUPPORTED_MODE_swigregister(ASI_SUPPORTED_MODE)
class ASI_DATE_TIME(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Year = property(_asicamera.ASI_DATE_TIME_Year_get, _asicamera.ASI_DATE_TIME_Year_set)
    Month = property(_asicamera.ASI_DATE_TIME_Month_get, _asicamera.ASI_DATE_TIME_Month_set)
    Day = property(_asicamera.ASI_DATE_TIME_Day_get, _asicamera.ASI_DATE_TIME_Day_set)
    Hour = property(_asicamera.ASI_DATE_TIME_Hour_get, _asicamera.ASI_DATE_TIME_Hour_set)
    Minute = property(_asicamera.ASI_DATE_TIME_Minute_get, _asicamera.ASI_DATE_TIME_Minute_set)
    Second = property(_asicamera.ASI_DATE_TIME_Second_get, _asicamera.ASI_DATE_TIME_Second_set)
    Msecond = property(_asicamera.ASI_DATE_TIME_Msecond_get, _asicamera.ASI_DATE_TIME_Msecond_set)
    Usecond = property(_asicamera.ASI_DATE_TIME_Usecond_get, _asicamera.ASI_DATE_TIME_Usecond_set)
    Unused = property(_asicamera.ASI_DATE_TIME_Unused_get, _asicamera.ASI_DATE_TIME_Unused_set)

    def __init__(self):
        _asicamera.ASI_DATE_TIME_swiginit(self, _asicamera.new_ASI_DATE_TIME())
    __swig_destroy__ = _asicamera.delete_ASI_DATE_TIME

# Register ASI_DATE_TIME in _asicamera:
_asicamera.ASI_DATE_TIME_swigregister(ASI_DATE_TIME)
class ASI_GPS_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Datetime = property(_asicamera.ASI_GPS_DATA_Datetime_get, _asicamera.ASI_GPS_DATA_Datetime_set)
    Latitude = property(_asicamera.ASI_GPS_DATA_Latitude_get, _asicamera.ASI_GPS_DATA_Latitude_set)
    Longitude = property(_asicamera.ASI_GPS_DATA_Longitude_get, _asicamera.ASI_GPS_DATA_Longitude_set)
    Altitude = property(_asicamera.ASI_GPS_DATA_Altitude_get, _asicamera.ASI_GPS_DATA_Altitude_set)
    SatelliteNum = property(_asicamera.ASI_GPS_DATA_SatelliteNum_get, _asicamera.ASI_GPS_DATA_SatelliteNum_set)
    Unused = property(_asicamera.ASI_GPS_DATA_Unused_get, _asicamera.ASI_GPS_DATA_Unused_set)

    def __init__(self):
        _asicamera.ASI_GPS_DATA_swiginit(self, _asicamera.new_ASI_GPS_DATA())
    __swig_destroy__ = _asicamera.delete_ASI_GPS_DATA

# Register ASI_GPS_DATA in _asicamera:
_asicamera.ASI_GPS_DATA_swigregister(ASI_GPS_DATA)

def ASIGetNumOfConnectedCameras():
    return _asicamera.ASIGetNumOfConnectedCameras()

def ASIGetProductIDs(pPIDs):
    return _asicamera.ASIGetProductIDs(pPIDs)

def ASICameraCheck(iVID, iPID):
    return _asicamera.ASICameraCheck(iVID, iPID)

def ASIGetCameraProperty(pASICameraInfo, iCameraIndex):
    return _asicamera.ASIGetCameraProperty(pASICameraInfo, iCameraIndex)

def ASIGetCameraPropertyByID(iCameraID, pASICameraInfo):
    return _asicamera.ASIGetCameraPropertyByID(iCameraID, pASICameraInfo)

def ASIOpenCamera(iCameraID):
    return _asicamera.ASIOpenCamera(iCameraID)

def ASIInitCamera(iCameraID):
    return _asicamera.ASIInitCamera(iCameraID)

def ASICloseCamera(iCameraID):
    return _asicamera.ASICloseCamera(iCameraID)

def ASIGetNumOfControls(iCameraID, piNumberOfControls):
    return _asicamera.ASIGetNumOfControls(iCameraID, piNumberOfControls)

def ASIGetControlCaps(iCameraID, iControlIndex, pControlCaps):
    return _asicamera.ASIGetControlCaps(iCameraID, iControlIndex, pControlCaps)

def ASIGetControlValue(iCameraID, ControlType, plValue, pbAuto):
    return _asicamera.ASIGetControlValue(iCameraID, ControlType, plValue, pbAuto)

def ASISetControlValue(iCameraID, ControlType, lValue, bAuto):
    return _asicamera.ASISetControlValue(iCameraID, ControlType, lValue, bAuto)

def ASISetROIFormat(iCameraID, iWidth, iHeight, iBin, Img_type):
    return _asicamera.ASISetROIFormat(iCameraID, iWidth, iHeight, iBin, Img_type)

def ASIGetROIFormat(iCameraID, piWidth, piHeight, piBin, pImg_type):
    return _asicamera.ASIGetROIFormat(iCameraID, piWidth, piHeight, piBin, pImg_type)

def ASISetStartPos(iCameraID, iStartX, iStartY):
    return _asicamera.ASISetStartPos(iCameraID, iStartX, iStartY)

def ASIGetStartPos(iCameraID, piStartX, piStartY):
    return _asicamera.ASIGetStartPos(iCameraID, piStartX, piStartY)

def ASIGetDroppedFrames(iCameraID, piDropFrames):
    return _asicamera.ASIGetDroppedFrames(iCameraID, piDropFrames)

def ASIEnableDarkSubtract(iCameraID, pcBMPPath):
    return _asicamera.ASIEnableDarkSubtract(iCameraID, pcBMPPath)

def ASIDisableDarkSubtract(iCameraID):
    return _asicamera.ASIDisableDarkSubtract(iCameraID)

def ASIStartVideoCapture(iCameraID):
    return _asicamera.ASIStartVideoCapture(iCameraID)

def ASIStopVideoCapture(iCameraID):
    return _asicamera.ASIStopVideoCapture(iCameraID)

def ASIGetVideoData(iCameraID, pBuffer, lBuffSize, iWaitms):
    return _asicamera.ASIGetVideoData(iCameraID, pBuffer, lBuffSize, iWaitms)

def ASIGetVideoDataGPS(iCameraID, pBuffer, lBuffSize, iWaitms, gpsData):
    return _asicamera.ASIGetVideoDataGPS(iCameraID, pBuffer, lBuffSize, iWaitms, gpsData)

def ASIPulseGuideOn(iCameraID, direction):
    return _asicamera.ASIPulseGuideOn(iCameraID, direction)

def ASIPulseGuideOff(iCameraID, direction):
    return _asicamera.ASIPulseGuideOff(iCameraID, direction)

def ASIStartExposure(iCameraID, bIsDark):
    return _asicamera.ASIStartExposure(iCameraID, bIsDark)

def ASIStopExposure(iCameraID):
    return _asicamera.ASIStopExposure(iCameraID)

def ASIGetExpStatus(iCameraID, pExpStatus):
    return _asicamera.ASIGetExpStatus(iCameraID, pExpStatus)

def ASIGetDataAfterExp(iCameraID, pBuffer, lBuffSize):
    return _asicamera.ASIGetDataAfterExp(iCameraID, pBuffer, lBuffSize)

def ASIGetDataAfterExpGPS(iCameraID, pBuffer, lBuffSize, gpsData):
    return _asicamera.ASIGetDataAfterExpGPS(iCameraID, pBuffer, lBuffSize, gpsData)

def ASIGetID(iCameraID, pID):
    return _asicamera.ASIGetID(iCameraID, pID)

def ASISetID(iCameraID, ID):
    return _asicamera.ASISetID(iCameraID, ID)

def ASIGetGainOffset(iCameraID, pOffset_HighestDR, pOffset_UnityGain, pGain_LowestRN, pOffset_LowestRN):
    return _asicamera.ASIGetGainOffset(iCameraID, pOffset_HighestDR, pOffset_UnityGain, pGain_LowestRN, pOffset_LowestRN)

def ASIGetLMHGainOffset(iCameraID, pLGain, pMGain, pHGain, pHOffset):
    return _asicamera.ASIGetLMHGainOffset(iCameraID, pLGain, pMGain, pHGain, pHOffset)

def ASIGetSDKVersion():
    return _asicamera.ASIGetSDKVersion()

def ASIGetCameraSupportMode(iCameraID, pSupportedMode):
    return _asicamera.ASIGetCameraSupportMode(iCameraID, pSupportedMode)

def ASIGetCameraMode(iCameraID, mode):
    return _asicamera.ASIGetCameraMode(iCameraID, mode)

def ASISetCameraMode(iCameraID, mode):
    return _asicamera.ASISetCameraMode(iCameraID, mode)

def ASISendSoftTrigger(iCameraID, bStart):
    return _asicamera.ASISendSoftTrigger(iCameraID, bStart)

def ASIGetSerialNumber(iCameraID, pSN):
    return _asicamera.ASIGetSerialNumber(iCameraID, pSN)

def ASISetTriggerOutputIOConf(iCameraID, pin, bPinHigh, lDelay, lDuration):
    return _asicamera.ASISetTriggerOutputIOConf(iCameraID, pin, bPinHigh, lDelay, lDuration)

def ASIGetTriggerOutputIOConf(iCameraID, pin, bPinHigh, lDelay, lDuration):
    return _asicamera.ASIGetTriggerOutputIOConf(iCameraID, pin, bPinHigh, lDelay, lDuration)

def ASIGPSGetData(iCameraID, startLineGPSData, endLineGPSData):
    return _asicamera.ASIGPSGetData(iCameraID, startLineGPSData, endLineGPSData)

